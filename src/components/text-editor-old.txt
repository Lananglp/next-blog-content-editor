// import './styles.scss'
'use client'
import { Color } from '@tiptap/extension-color'
import ListItem from '@tiptap/extension-list-item'
import TextStyle from '@tiptap/extension-text-style'
import Document from '@tiptap/extension-document'
import Paragraph from '@tiptap/extension-paragraph'
import Text from '@tiptap/extension-text'
import Heading from '@tiptap/extension-heading'
import Italic from '@tiptap/extension-italic'
import Bold from '@tiptap/extension-bold'
import Underline from '@tiptap/extension-underline'
import { BubbleMenu, EditorContent, EditorProvider, FloatingMenu, useCurrentEditor, useEditor } from '@tiptap/react'
import StarterKit from '@tiptap/starter-kit'
import {
    Bold as BoldIcon,
    Italic as ItalicIcon,
    Underline as UnderlineIcon,
    Strikethrough,
    Code as CodeIcon,
    Undo as UndoIcon,
    Redo as RedoIcon,
} from 'lucide-react'
import { FaListCheck, FaListOl, FaListUl } from "react-icons/fa6";
import React from 'react'
import '@/app/text-editor.css'
import { Controller } from 'react-hook-form'

const MenuBar = ({ className }: React.HTMLAttributes<HTMLDivElement>) => {
    const { editor } = useCurrentEditor();

    if (!editor) {
        return null
    }

    return (
        <div className='lg:ms-4'>
            <div className={`sticky top-20 flex flex-col gap-4 bg-zinc-800 rounded-lg p-3 ${className}`}>
                <div>
                    <p className='text-xs mb-1'>Settings :</p>
                    <div className="flex flex-wrap gap-1">
                        <button
                            onClick={() => editor.chain().focus().undo().run()}
                            disabled={!editor.can().chain().focus().undo().run()}
                            className='disabled:opacity-50 disabled:hover:bg-transparent disabled:cursor-not-allowed hover:bg-zinc-700 border border-zinc-700 rounded text-sm px-2 py-0.5'
                        >
                            <UndoIcon className='inline w-4 h-4 mb-0.5 me-1' />Undo
                        </button>
                        <button
                            onClick={() => editor.chain().focus().redo().run()}
                            disabled={!editor.can().chain().focus().redo().run()}
                            className='disabled:opacity-50 disabled:hover:bg-transparent disabled:cursor-not-allowed hover:bg-zinc-700 border border-zinc-700 rounded text-sm px-2 py-0.5'
                        >
                            Redo<RedoIcon className='inline w-4 h-4 mb-0.5 ms-1' />
                        </button>
                    </div>
                </div>
                <div>
                    <p className='text-xs mb-1'>Font Style :</p>
                    <div className="flex flex-wrap gap-1">
                        <button
                            title='bold'
                            onClick={() => editor.chain().focus().toggleBold().run()}
                            disabled={!editor.can().chain().focus().toggleBold().run()}
                            className={`${editor.isActive('bold') ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            <BoldIcon className='w-4 h-4' />
                        </button>
                        <button
                            title='italic'
                            onClick={() => editor.chain().focus().toggleItalic().run()}
                            disabled={!editor.can().chain().focus().toggleItalic().run()}
                            className={`${editor.isActive('italic') ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            <ItalicIcon className='w-4 h-4' />
                        </button>
                        <button
                            title='underline'
                            onClick={() => editor.chain().focus().toggleUnderline().run()}
                            className={`${editor.isActive('underline') ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            <UnderlineIcon className='w-4 h-4' />
                        </button>
                        <button
                            title='strikethrough'
                            onClick={() => editor.chain().focus().toggleStrike().run()}
                            disabled={!editor.can().chain().focus().toggleStrike().run()}
                            className={`${editor.isActive('strike') ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            <Strikethrough className='w-4 h-4' />
                        </button>
                        <button
                            title='code'
                            onClick={() => editor.chain().focus().toggleCode().run()}
                            disabled={!editor.can().chain().focus().toggleCode().run()}
                            className={`${editor.isActive('code') ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            <CodeIcon className='w-4 h-4' />
                        </button>
                        <button
                            title='reset font style'
                            onClick={() => editor.chain().focus().unsetAllMarks().run()}
                            className='hover:bg-zinc-700 border border-zinc-700 rounded text-sm px-2 py-0.5'
                        >
                            reset
                        </button>
                    </div>
                </div>
                <div>
                    <p className='text-xs mb-1'>Font Type :</p>
                    <div className='flex flex-wrap gap-1'>
                        <button
                            title='paragraph'
                            onClick={() => editor.chain().focus().setParagraph().run()}
                            className={`${editor.isActive('paragraph') ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            Paragraph
                        </button>
                        <button
                            title='heading 1'
                            onClick={() => editor.chain().focus().toggleHeading({ level: 1 }).run()}
                            className={`${editor.isActive('heading', { level: 1 }) ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            H1
                        </button>
                        <button
                            title='heading 2'
                            onClick={() => editor.chain().focus().toggleHeading({ level: 2 }).run()}
                            className={`${editor.isActive('heading', { level: 2 }) ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            H2
                        </button>
                        <button
                            title='heading 3'
                            onClick={() => editor.chain().focus().toggleHeading({ level: 3 }).run()}
                            className={`${editor.isActive('heading', { level: 3 }) ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            H3
                        </button>
                        <button
                            title='heading 4'
                            onClick={() => editor.chain().focus().toggleHeading({ level: 4 }).run()}
                            className={`${editor.isActive('heading', { level: 4 }) ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            H4
                        </button>
                        <button
                            title='heading 5'
                            onClick={() => editor.chain().focus().toggleHeading({ level: 5 }).run()}
                            className={`${editor.isActive('heading', { level: 5 }) ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            H5
                        </button>
                        <button
                            title='heading 6'
                            onClick={() => editor.chain().focus().toggleHeading({ level: 6 }).run()}
                            className={`${editor.isActive('heading', { level: 6 }) ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            H6
                        </button>
                        <button
                            title='reset font type'
                            onClick={() => editor.chain().focus().clearNodes().run()}
                            className='hover:bg-zinc-700 border border-zinc-700 rounded text-sm px-2 py-0.5'
                        >
                            reset
                        </button>
                    </div>
                </div>
                <div>
                    <p className='text-xs mb-1'>Block :</p>
                    <div className='flex flex-wrap gap-1'>
                        <button
                            onClick={() => editor.chain().focus().toggleBulletList().run()}
                            className={`${editor.isActive('bulletList') ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            Bullet list
                        </button>
                        <button
                            onClick={() => editor.chain().focus().toggleOrderedList().run()}
                            className={`${editor.isActive('orderedList') ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            Ordered list
                        </button>
                        <button
                            onClick={() => editor.chain().focus().toggleCodeBlock().run()}
                            className={`${editor.isActive('codeBlock') ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            Code block
                        </button>
                        <button
                            onClick={() => editor.chain().focus().toggleBlockquote().run()}
                            className={`${editor.isActive('blockquote') ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            Blockquote
                        </button>
                        <button onClick={() => editor.chain().focus().setHorizontalRule().run()}>
                            Horizontal rule
                        </button>
                        <button onClick={() => editor.chain().focus().setHardBreak().run()}>
                            Hard break
                        </button>
                        <button
                            onClick={() => editor.chain().focus().setColor('#958DF1').run()}
                            className={`${editor.isActive('textStyle', { color: '#958DF1' }) ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            Purple
                        </button>
                    </div>
                </div>
            </div>
        </div>
    )
}

const BubbleEditor = ({ className }: React.HTMLAttributes<HTMLDivElement>) => {
    const { editor } = useCurrentEditor()

    if (!editor) {
        return null
    }

    return (
        <>
            <div className={`flex flex-col gap-4 bg-zinc-800 border border-zinc-600 rounded-md p-2 ${className}`}>
                <div>
                    <p className='text-xs mb-1'>Font Style :</p>
                    <div className="flex flex-wrap gap-1">
                        <button
                            title='bold'
                            onClick={() => editor.chain().focus().toggleBold().run()}
                            disabled={!editor.can().chain().focus().toggleBold().run()}
                            className={`${editor.isActive('bold') ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            <BoldIcon className='w-4 h-4' />
                        </button>
                        <button
                            title='italic'
                            onClick={() => editor.chain().focus().toggleItalic().run()}
                            disabled={!editor.can().chain().focus().toggleItalic().run()}
                            className={`${editor.isActive('italic') ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            <ItalicIcon className='w-4 h-4' />
                        </button>
                        <button
                            title='underline'
                            onClick={() => editor.chain().focus().toggleUnderline().run()}
                            className={`${editor.isActive('underline') ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            <UnderlineIcon className='w-4 h-4' />
                        </button>
                        <button
                            title='strikethrough'
                            onClick={() => editor.chain().focus().toggleStrike().run()}
                            disabled={!editor.can().chain().focus().toggleStrike().run()}
                            className={`${editor.isActive('strike') ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            <Strikethrough className='w-4 h-4' />
                        </button>
                        <button
                            title='code'
                            onClick={() => editor.chain().focus().toggleCode().run()}
                            disabled={!editor.can().chain().focus().toggleCode().run()}
                            className={`${editor.isActive('code') ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            <CodeIcon className='w-4 h-4' />
                        </button>
                        <button
                            title='reset font style'
                            onClick={() => editor.chain().focus().unsetAllMarks().run()}
                            className='hover:bg-zinc-700 border border-zinc-700 rounded text-sm px-2 py-0.5'
                        >
                            reset
                        </button>
                    </div>
                </div>
                <div>
                    <p className='text-xs mb-1'>Font Type :</p>
                    <div className='flex flex-wrap gap-1'>
                        <button
                            title='paragraph'
                            onClick={() => editor.chain().focus().setParagraph().run()}
                            className={`${editor.isActive('paragraph') ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            Paragraph
                        </button>
                        <button
                            title='heading 1'
                            onClick={() => editor.chain().focus().toggleHeading({ level: 1 }).run()}
                            className={`${editor.isActive('heading', { level: 1 }) ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            H1
                        </button>
                        <button
                            title='heading 2'
                            onClick={() => editor.chain().focus().toggleHeading({ level: 2 }).run()}
                            className={`${editor.isActive('heading', { level: 2 }) ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            H2
                        </button>
                        <button
                            title='heading 3'
                            onClick={() => editor.chain().focus().toggleHeading({ level: 3 }).run()}
                            className={`${editor.isActive('heading', { level: 3 }) ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            H3
                        </button>
                        <button
                            title='heading 4'
                            onClick={() => editor.chain().focus().toggleHeading({ level: 4 }).run()}
                            className={`${editor.isActive('heading', { level: 4 }) ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            H4
                        </button>
                        <button
                            title='heading 5'
                            onClick={() => editor.chain().focus().toggleHeading({ level: 5 }).run()}
                            className={`${editor.isActive('heading', { level: 5 }) ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            H5
                        </button>
                        <button
                            title='heading 6'
                            onClick={() => editor.chain().focus().toggleHeading({ level: 6 }).run()}
                            className={`${editor.isActive('heading', { level: 6 }) ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            H6
                        </button>
                        <button
                            title='reset font type'
                            onClick={() => editor.chain().focus().clearNodes().run()}
                            className='hover:bg-zinc-700 border border-zinc-700 rounded text-sm px-2 py-0.5'
                        >
                            reset
                        </button>
                    </div>
                </div>
            </div>
        </>
    )
}

const extensions = [
    Document,
    Paragraph,
    Text,
    Underline,
    Heading.configure({
        levels: [1, 2, 3, 4, 5, 6],
    }),
    StarterKit.configure({
        bulletList: {
            keepMarks: true,
            keepAttributes: false,
        },
        orderedList: {
            keepMarks: true,
            keepAttributes: false,
        },
    }),
]

const content = `
<h1>
  Selamat datang
</h1>
<p>Saya adalah orang hebat</p>
`

const contentX = `
<h1>
  Hi there,
</h1>
<h2>
  Hi there,
</h2>
<h3>
  Hi there,
</h3>
<h4>
  Hi there,
</h4>
<h5>
  Hi there,
</h5>
<h6>
  Hi there,
</h6>
<p>
  this is a <em>basic</em> example of <strong>Tiptap</strong>. Sure, there are all kind of basic text styles you’d probably expect from a text editor. But wait until you see the lists:
</p>
<ul>
  <li>
    That’s a bullet list with one …
  </li>
  <li>
    … or two list items.
  </li>
</ul>
<p>
  Isn’t that great? And all of that is editable. But wait, there’s more. Let’s try a code block:
</p>
<pre><code class="language-css">body {
  display: none;
}</code></pre>
<p>
  I know, I know, this is impressive. It’s only the tip of the iceberg though. Give it a try and click a little bit around. Don’t forget to check the other examples too.
</p>
<blockquote>
  Wow, that’s amazing. Good work, boy! 👏
  <br />
  — Mom
</blockquote>
`

export default () => {
    return (
        <div className='flex'>
            <EditorProvider extensions={extensions} content={content} editorContainerProps={{ className: 'w-full' }}>
                <MenuBar className='w-96' />
                <FloatingMenu editor={null}><span className='text-sm text-zinc-500'>This is the floating menu</span></FloatingMenu>
                <BubbleMenu editor={null}>
                    <BubbleEditor className='w-64 md:w-[32rem]' />
                </BubbleMenu>
            </EditorProvider>
        </div>
    )
}

// const RichTextEditor = ({ control, name }: { control: any; name: string }) => {
//     return (
//         <Controller
//             name={name}
//             control={control}
//             render={({ field: { onChange, value } }) => (
//                 <div className='flex'>
//                     <EditorProvider
//                         extensions={extensions}
//                         content={value || "<p>Start writing...</p>"} // Isi awal editor
//                         editorProps={{
//                             onUpdate: ({ editor }: any) => onChange(editor.getHTML()), // Update form setiap perubahan di editor
//                         }}
//                     >
//                         <EditorContentComponent />
//                     </EditorProvider>
//                 </div>
//             )}
//         />
//     );
// };

// // Komponen yang menampilkan EditorContent dan menu
// const EditorContentComponent = () => {
//     const { editor } = useCurrentEditor();

//     return (
//         <>
//             {/* Menu Bar */}
//             <MenuBar className='w-96' />
//             <FloatingMenu editor={editor}>
//                 <span className="text-sm text-zinc-500">This is the floating menu</span>
//             </FloatingMenu>

//             <BubbleMenu editor={editor}>
//                 <BubbleEditor className="w-64 md:w-[32rem]" />
//             </BubbleMenu>
//         </>
//     );
// };

// export default RichTextEditor;
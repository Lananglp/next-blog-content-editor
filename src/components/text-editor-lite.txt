import { Color } from '@tiptap/extension-color'
import ListItem from '@tiptap/extension-list-item'
import TextStyle from '@tiptap/extension-text-style'
import Document from '@tiptap/extension-document'
import Paragraph from '@tiptap/extension-paragraph'
import Text from '@tiptap/extension-text'
import Heading from '@tiptap/extension-heading'
import Italic from '@tiptap/extension-italic'
import Bold from '@tiptap/extension-bold'
import Underline from '@tiptap/extension-underline'
import Placeholder from '@tiptap/extension-placeholder'
import Link from '@tiptap/extension-link'
import TextAlign from '@tiptap/extension-text-align'
import Focus from '@tiptap/extension-focus'
import Typography from '@tiptap/extension-typography'
import Highlight from '@tiptap/extension-highlight'
import Subscript from '@tiptap/extension-subscript'
import Superscript from '@tiptap/extension-superscript'
import Image from '@tiptap/extension-image'
import ImageResize from 'tiptap-extension-resize-image';
import { BubbleMenu, EditorContent, FloatingMenu, useEditor } from '@tiptap/react'
import StarterKit from '@tiptap/starter-kit'
import {
    Bold as BoldIcon,
    Italic as ItalicIcon,
    Underline as UnderlineIcon,
    Strikethrough,
    Code as CodeIcon,
    Undo as UndoIcon,
    Redo as RedoIcon,
    Superscript as SuperscriptIcon,
    Subscript as SubscriptIcon,
    AlignJustify,
    AlignLeft,
    AlignCenter,
    AlignRight,
    ListRestart,
    LinkIcon,
    CornerDownLeft,
    Minus,
    X,
} from 'lucide-react'
import { FaListCheck, FaListOl, FaListUl } from "react-icons/fa6";
import { Controller } from 'react-hook-form';
import React, { useCallback, useEffect, useState } from 'react';
import '@/app/text-editor.css';

function TextEditorLite({ control, name }: { control: any; name: string }) {
  return (
    <Controller
      name={name}
      control={control}
      render={({ field: { onChange, value } }) => {

        const CustomImage = Image.extend({
            addAttributes() {
                return {
                    ...this.parent?.(),
                    width: {
                        default: "200px",
                        parseHTML: (element) => element.getAttribute("width") || "200px",
                        renderHTML: (attributes) => {
                            return attributes.width ? { width: attributes.width } : {};
                        },
                    },
                    height: {
                        default: "200px",
                        parseHTML: (element) => element.getAttribute("height") || "200px",
                        renderHTML: (attributes) => {
                            return attributes.height ? { height: attributes.height } : {};
                        },
                    },
                };
            },
        });

        const editor = useEditor({
          extensions: [
            StarterKit,
            Document,
            Paragraph,
            Text,
            Typography,
            Bold,
            Italic,
            Underline,
            Subscript,
            Superscript,
            CustomImage,
            ImageResize,
            Color.configure({
                types: ['textStyle'],
            }),
            ListItem,
            TextStyle,
            Focus.configure({
                className: 'outline outline-offset-2 outline-1 outline-blue-600',
                mode: 'deepest',
            }),
            Heading.configure({
                levels: [1, 2, 3, 4, 5, 6]
            }),
            TextAlign.configure({
                types: ['heading', 'paragraph'],
            }),
            Highlight.configure({
                multicolor: true
            }),
            Placeholder.configure({
                placeholder: 'Write something â€¦',
            }),
            Link.configure({
                openOnClick: false,
                autolink: true,
                defaultProtocol: 'https',
                protocols: ['http', 'https'],
                isAllowedUri: (url, ctx) => {
                    try {
                        // construct URL
                        const parsedUrl = url.includes(':') ? new URL(url) : new URL(`${ctx.defaultProtocol}://${url}`)

                        // use default validation
                        if (!ctx.defaultValidate(parsedUrl.href)) {
                            return false
                        }

                        // disallowed protocols
                        const disallowedProtocols = ['ftp', 'file', 'mailto']
                        const protocol = parsedUrl.protocol.replace(':', '')

                        if (disallowedProtocols.includes(protocol)) {
                            return false
                        }

                        // only allow protocols specified in ctx.protocols
                        const allowedProtocols = ctx.protocols.map(p => (typeof p === 'string' ? p : p.scheme))

                        if (!allowedProtocols.includes(protocol)) {
                            return false
                        }

                        // disallowed domains
                        const disallowedDomains = ['example-phishing.com', 'malicious-site.net']
                        const domain = parsedUrl.hostname

                        if (disallowedDomains.includes(domain)) {
                            return false
                        }

                        // all checks have passed
                        return true
                    } catch {
                        return false
                    }
                },
                shouldAutoLink: url => {
                    try {
                        // construct URL
                        const parsedUrl = url.includes(':') ? new URL(url) : new URL(`https://${url}`)

                        // only auto-link if the domain is not in the disallowed list
                        const disallowedDomains = ['example-no-autolink.com', 'another-no-autolink.com']
                        const domain = parsedUrl.hostname

                        return !disallowedDomains.includes(domain)
                    } catch {
                        return false
                    }
                },

            }),
        ],
          content: value || '',
          onUpdate: ({ editor }) => {
            onChange(editor.getHTML());
          },
        });

        // if (node && node.type.name === "image") {

        if (!editor) {
          return <div>Loading...</div>;
        }

        return (
            <div className='flex'>
                {editor &&
                    <BubbleMenu editor={editor} tippyOptions={{ duration: 100 }}>
                        <BubbleEditor className='w-64 md:w-[32rem]' editor={editor} />
                    </BubbleMenu>
                }
                {editor && 
                    <FloatingMenu editor={editor}>
                        <span className='text-sm text-zinc-500'>add text here...</span>
                    </FloatingMenu>
                }
                <EditorContent className='w-full' editor={editor} />
                {editor && <MenuEditor className='w-96' editor={editor} />}
            </div>
        );
      }}
    />
  );
}

const BubbleEditor = ({ className, editor }: { className: string; editor: any}) => {

    if (!editor) {
        return null
    }

    const setLink = useCallback(() => {
        const previousUrl = editor.getAttributes('link').href
        const url = window.prompt('URL', previousUrl)

        // cancelled
        if (url === null) {
            return
        }

        // empty
        if (url === '') {
            editor.chain().focus().extendMarkRange('link').unsetLink()
                .run()

            return
        }

        // update link
        try {
            editor.chain().focus().extendMarkRange('link').setLink({ href: url })
                .run()
        } catch (e: any) {
            alert(e.message)
        }
    }, [editor])

    return (
        <>
            <div className={`flex flex-col gap-4 bg-zinc-800 border border-zinc-600 rounded-md p-2 ${className}`}>
                <div>
                    <p className='text-xs mb-1'>Font Style :</p>
                    <div className="flex flex-wrap gap-1">
                        <div className='bg-zinc-700 rounded flex items-center pe-1.5'>
                            <input
                                id='setTextColor1'
                                type="color"
                                onInput={e => {
                                    const target = e.target as HTMLInputElement;
                                    editor.chain().focus().setColor(target.value).run();
                                }}
                                value={editor.getAttributes('textStyle').color ? editor.getAttributes('textStyle').color : '#d4d4d8'}
                                data-testid="setColor"
                                className='bg-transparent border-none outline-none rounded ring-0 h-6 w-6 p-[1px] cursor-pointer appearance-none'
                            />
                            <label htmlFor='setTextColor1' className='cursor-pointer text-xs'>{editor.getAttributes('textStyle').color ? editor.getAttributes('textStyle').color : '#d4d4d8'}</label>
                        </div>
                        {/* <button
                            title='reset color'
                            onClick={() => editor.chain().focus().unsetColor().run()}
                            data-testid="unsetColor"
                            className='hover:bg-zinc-700 border border-zinc-700 rounded text-sm px-2 py-0.5'
                        >
                            <X className='w-4 h-4' />
                        </button> */}
                        <button
                            title='bold'
                            onClick={() => editor.chain().focus().toggleBold().run()}
                            disabled={!editor.can().chain().focus().toggleBold().run()}
                            className={`${editor.isActive('bold') ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            <BoldIcon className='w-4 h-4' />
                        </button>
                        <button
                            title='italic'
                            onClick={() => editor.chain().focus().toggleItalic().run()}
                            disabled={!editor.can().chain().focus().toggleItalic().run()}
                            className={`${editor.isActive('italic') ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            <ItalicIcon className='w-4 h-4' />
                        </button>
                        <button
                            title='underline'
                            onClick={() => editor.chain().focus().toggleUnderline().run()}
                            className={`${editor.isActive('underline') ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            <UnderlineIcon className='w-4 h-4' />
                        </button>
                        <button
                            title='strikethrough'
                            onClick={() => editor.chain().focus().toggleStrike().run()}
                            disabled={!editor.can().chain().focus().toggleStrike().run()}
                            className={`${editor.isActive('strike') ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            <Strikethrough className='w-4 h-4' />
                        </button>
                        <button
                            title='code'
                            onClick={() => editor.chain().focus().toggleCode().run()}
                            disabled={!editor.can().chain().focus().toggleCode().run()}
                            className={`${editor.isActive('code') ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            <CodeIcon className='w-4 h-4' />
                        </button>
                        <button title='set link' onClick={setLink} className={`${editor.isActive('link') ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}>
                            <LinkIcon className='w-4 h-4' />
                        </button>
                        <button
                            title='highlight'
                            onClick={() => editor.chain().focus().toggleHighlight().run()}
                            className={`${editor.isActive('highlight') ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            Highlight
                        </button>
                        <button
                            title='subscript'
                            onClick={() => editor.chain().focus().toggleSubscript().run()}
                            className={`${editor.isActive('subscript') ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            <SubscriptIcon className='w-4 h-4' />
                        </button>
                        <button
                            title='superscript'
                            onClick={() => editor.chain().focus().toggleSuperscript().run()}
                            className={`${editor.isActive('superscript') ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            <SuperscriptIcon className='w-4 h-4' />
                        </button>
                        <button
                            title='reset font style'
                            onClick={() => editor.chain().focus().unsetAllMarks().run()}
                            className='hover:bg-zinc-700 border border-zinc-700 rounded text-sm px-2 py-0.5'
                        >
                            reset
                        </button>
                    </div>
                </div>
                <div>
                    <p className='text-xs mb-1'>text Align :</p>
                    <div className="flex flex-wrap gap-1">
                        <button
                            title='align left'
                            onClick={() => editor.chain().focus().setTextAlign('left').run()}
                            className={`${editor.isActive({ textAlign: 'left' }) ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            <AlignLeft className='w-4 h-4' />
                        </button>
                        <button
                            title='align center'
                            onClick={() => editor.chain().focus().setTextAlign('center').run()}
                            className={`${editor.isActive({ textAlign: 'center' }) ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            <AlignCenter className='w-4 h-4' />
                        </button>
                        <button
                            title='align right'
                            onClick={() => editor.chain().focus().setTextAlign('right').run()}
                            className={`${editor.isActive({ textAlign: 'right' }) ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            <AlignRight className='w-4 h-4' />
                        </button>
                        <button
                            title='align justify'
                            onClick={() => editor.chain().focus().setTextAlign('justify').run()}
                            className={`${editor.isActive({ textAlign: 'justify' }) ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            <AlignJustify className='w-4 h-4' />
                        </button>
                        <button
                            title='reset text align'
                            onClick={() => editor.chain().focus().unsetTextAlign().run()}
                            className='hover:bg-zinc-700 border border-zinc-700 rounded text-sm px-2 py-0.5'
                        >
                            <ListRestart className='w-4 h-4' />
                        </button>
                    </div>
                </div>
                <div>
                    <p className='text-xs mb-1'>Font Type :</p>
                    <div className='flex flex-wrap gap-1'>
                        <button
                            title='paragraph'
                            onClick={() => editor.chain().focus().setParagraph().run()}
                            className={`${editor.isActive('paragraph') ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            Paragraph
                        </button>
                        <button
                            title='heading 1'
                            onClick={() => editor.chain().focus().toggleHeading({ level: 1 }).run()}
                            className={`${editor.isActive('heading', { level: 1 }) ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            H1
                        </button>
                        <button
                            title='heading 2'
                            onClick={() => editor.chain().focus().toggleHeading({ level: 2 }).run()}
                            className={`${editor.isActive('heading', { level: 2 }) ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            H2
                        </button>
                        <button
                            title='heading 3'
                            onClick={() => editor.chain().focus().toggleHeading({ level: 3 }).run()}
                            className={`${editor.isActive('heading', { level: 3 }) ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            H3
                        </button>
                        <button
                            title='heading 4'
                            onClick={() => editor.chain().focus().toggleHeading({ level: 4 }).run()}
                            className={`${editor.isActive('heading', { level: 4 }) ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            H4
                        </button>
                        <button
                            title='heading 5'
                            onClick={() => editor.chain().focus().toggleHeading({ level: 5 }).run()}
                            className={`${editor.isActive('heading', { level: 5 }) ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            H5
                        </button>
                        <button
                            title='heading 6'
                            onClick={() => editor.chain().focus().toggleHeading({ level: 6 }).run()}
                            className={`${editor.isActive('heading', { level: 6 }) ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            H6
                        </button>
                        <button
                            title='reset font type'
                            onClick={() => editor.chain().focus().clearNodes().run()}
                            className='hover:bg-zinc-700 border border-zinc-700 rounded text-sm px-2 py-0.5'
                        >
                            reset
                        </button>
                    </div>
                </div>
            </div>
        </>
    )
}

const MenuEditor = ({ className, editor }: { className: string; editor: any }) => {

    if (!editor) {
        return null
    }

    const setLink = useCallback(() => {
        const previousUrl = editor.getAttributes('link').href
        const url = window.prompt('URL', previousUrl)

        // cancelled
        if (url === null) {
            return
        }

        // empty
        if (url === '') {
            editor.chain().focus().extendMarkRange('link').unsetLink()
                .run()

            return
        }

        // update link
        try {
            editor.chain().focus().extendMarkRange('link').setLink({ href: url })
                .run()
        } catch (e: any) {
            alert(e.message)
        }
    }, [editor])

    // const addImage = useCallback(() => {
    //     const url = window.prompt("Image URL");
    //     if (!url) return;

    //     const width = window.prompt("Width (px) or auto", "200px");
    //     const height = window.prompt("Height (px) or auto", "200px");

    //     editor.chain().focus().setImage({ src: url, width, height }).run();
    // }, [editor]);

    // const updateImageSize = (width: string, height: string) => {
    //     const { state, view } = editor;
    //     const { selection } = state;
    //     const node = selection.node;
    
    //     if (!node || node.type.name !== "image") return; // Pastikan yang dipilih adalah gambar
    
    //     // Fokus ulang agar editor tetap aktif
    //     editor.chain().focus().setNodeAttributes(selection.anchor, { width, height }).run();
    // };

    return (
        <div className='lg:ms-4'>
            <div className={`sticky top-0 flex flex-col gap-4 bg-zinc-800 rounded-lg p-3 ${className}`}>

                <ImageEditorComponent className='mt-2' editor={editor} />

                {/* <div className="flex gap-2 mt-2">
                    <input
                        type="number"
                        placeholder="Width"
                        className="border p-1 w-20"
                        onChange={(e) => editor.chain().focus().setImage({ width: e.target?.value }).run()} // Pastikan fokus tetap di editor
                    />
                    <input
                        type="number"
                        placeholder="Height"
                        className="border p-1 w-20"
                        onClick={() => editor.chain().focus().run()} // Pastikan fokus tetap di editor
                        onChange={(e) => updateImageSize("200px", e.target.value)}
                    />
                </div> */}

                <div>
                    <p className='text-xs mb-1'>Settings :</p>
                    <div className="flex flex-wrap gap-1">
                        <button
                            title='undo'
                            onClick={() => editor.chain().focus().undo().run()}
                            disabled={!editor.can().chain().focus().undo().run()}
                            className='disabled:opacity-50 disabled:hover:bg-transparent disabled:cursor-not-allowed hover:bg-zinc-700 border border-zinc-700 rounded text-sm px-2 py-0.5'
                        >
                            <UndoIcon className='inline w-4 h-4 mb-0.5 me-1' />Undo
                        </button>
                        <button
                            title='redo'
                            onClick={() => editor.chain().focus().redo().run()}
                            disabled={!editor.can().chain().focus().redo().run()}
                            className='disabled:opacity-50 disabled:hover:bg-transparent disabled:cursor-not-allowed hover:bg-zinc-700 border border-zinc-700 rounded text-sm px-2 py-0.5'
                        >
                            Redo<RedoIcon className='inline w-4 h-4 mb-0.5 ms-1' />
                        </button>
                        <button
                            title='Horizontal rule <hr/>'
                            onClick={() => editor.chain().focus().setHorizontalRule().run()}
                            className='hover:bg-zinc-700 border border-zinc-700 rounded text-sm px-2 py-0.5'
                        >
                            <Minus className='inline w-4 h-4 me-1' />add line
                        </button>
                        <button
                            title='hard break <br/>'
                            onClick={() => editor.chain().focus().setHardBreak().run()}
                            className='hover:bg-zinc-700 border border-zinc-700 rounded text-sm px-2 py-0.5'
                        >
                            <CornerDownLeft className='inline w-4 h-4 me-1' />Enter
                        </button>
                    </div>
                </div>
                <div>
                    <p className='text-xs mb-1'>text Align :</p>
                    <div className="flex flex-wrap gap-1">
                        <button
                            title='align left'
                            onClick={() => editor.chain().focus().setTextAlign('left').run()}
                            className={`${editor.isActive({ textAlign: 'left' }) ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            <AlignLeft className='w-4 h-4' />
                        </button>
                        <button
                            title='align center'
                            onClick={() => editor.chain().focus().setTextAlign('center').run()}
                            className={`${editor.isActive({ textAlign: 'center' }) ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            <AlignCenter className='w-4 h-4' />
                        </button>
                        <button
                            title='align right'
                            onClick={() => editor.chain().focus().setTextAlign('right').run()}
                            className={`${editor.isActive({ textAlign: 'right' }) ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            <AlignRight className='w-4 h-4' />
                        </button>
                        <button
                            title='align justify'
                            onClick={() => editor.chain().focus().setTextAlign('justify').run()}
                            className={`${editor.isActive({ textAlign: 'justify' }) ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            <AlignJustify className='w-4 h-4' />
                        </button>
                        <button
                            title='reset text align'
                            onClick={() => editor.chain().focus().unsetTextAlign().run()}
                            className='hover:bg-zinc-700 border border-zinc-700 rounded text-sm px-2 py-0.5'
                        >
                            <ListRestart className='w-4 h-4' />
                        </button>
                    </div>
                </div>
                <div>
                    <p className='text-xs mb-1'>Font Style :</p>
                    <div className="flex flex-wrap gap-1">
                        <div className='bg-zinc-700 rounded flex items-center pe-1.5'>
                            <input
                                id='setTextColor2'
                                type="color"
                                onInput={e => {
                                    const target = e.target as HTMLInputElement;
                                    editor.chain().focus().setColor(target.value).run();
                                }}
                                value={editor.getAttributes('textStyle').color ? editor.getAttributes('textStyle').color : '#d4d4d8'}
                                data-testid="setColor"
                                className='bg-transparent border-none outline-none rounded ring-0 h-6 w-6 p-[1px] cursor-pointer appearance-none'
                            />
                            <label htmlFor='setTextColor2' className='cursor-pointer text-xs'>{editor.getAttributes('textStyle').color ? editor.getAttributes('textStyle').color : '#d4d4d8'}</label>
                        </div>
                        {/* <button
                            title='reset color'
                            onClick={() => editor.chain().focus().unsetColor().run()}
                            data-testid="unsetColor"
                            className='hover:bg-zinc-700 border border-zinc-700 rounded text-sm px-2 py-0.5'
                        >
                            <X className='w-4 h-4' />
                        </button> */}
                        <button
                            title='bold'
                            onClick={() => editor.chain().focus().toggleBold().run()}
                            disabled={!editor.can().chain().focus().toggleBold().run()}
                            className={`${editor.isActive('bold') ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            <BoldIcon className='w-4 h-4' />
                        </button>
                        <button
                            title='italic'
                            onClick={() => editor.chain().focus().toggleItalic().run()}
                            disabled={!editor.can().chain().focus().toggleItalic().run()}
                            className={`${editor.isActive('italic') ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            <ItalicIcon className='w-4 h-4' />
                        </button>
                        <button
                            title='underline'
                            onClick={() => editor.chain().focus().toggleUnderline().run()}
                            className={`${editor.isActive('underline') ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            <UnderlineIcon className='w-4 h-4' />
                        </button>
                        <button
                            title='strikethrough'
                            onClick={() => editor.chain().focus().toggleStrike().run()}
                            disabled={!editor.can().chain().focus().toggleStrike().run()}
                            className={`${editor.isActive('strike') ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            <Strikethrough className='w-4 h-4' />
                        </button>
                        <button
                            title='subscript'
                            onClick={() => editor.chain().focus().toggleSubscript().run()}
                            className={`${editor.isActive('subscript') ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            <SubscriptIcon className='w-4 h-4' />
                        </button>
                        <button
                            title='superscript'
                            onClick={() => editor.chain().focus().toggleSuperscript().run()}
                            className={`${editor.isActive('superscript') ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            <SuperscriptIcon className='w-4 h-4' />
                        </button>
                        <button
                            title='reset font style'
                            onClick={() => editor.chain().focus().unsetAllMarks().run()}
                            className='hover:bg-zinc-700 border border-zinc-700 rounded text-sm px-2 py-0.5'
                        >
                            reset
                        </button>
                    </div>
                </div>
                <div>
                    <p className='text-xs mb-1'>Font Type :</p>
                    <div className='flex flex-wrap gap-1'>
                        <button
                            title='paragraph'
                            onClick={() => editor.chain().focus().setParagraph().run()}
                            className={`${editor.isActive('paragraph') ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            Paragraph
                        </button>
                        <button
                            title='heading 1'
                            onClick={() => editor.chain().focus().toggleHeading({ level: 1 }).run()}
                            className={`${editor.isActive('heading', { level: 1 }) ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            H1
                        </button>
                        <button
                            title='heading 2'
                            onClick={() => editor.chain().focus().toggleHeading({ level: 2 }).run()}
                            className={`${editor.isActive('heading', { level: 2 }) ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            H2
                        </button>
                        <button
                            title='heading 3'
                            onClick={() => editor.chain().focus().toggleHeading({ level: 3 }).run()}
                            className={`${editor.isActive('heading', { level: 3 }) ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            H3
                        </button>
                        <button
                            title='heading 4'
                            onClick={() => editor.chain().focus().toggleHeading({ level: 4 }).run()}
                            className={`${editor.isActive('heading', { level: 4 }) ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            H4
                        </button>
                        <button
                            title='heading 5'
                            onClick={() => editor.chain().focus().toggleHeading({ level: 5 }).run()}
                            className={`${editor.isActive('heading', { level: 5 }) ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            H5
                        </button>
                        <button
                            title='heading 6'
                            onClick={() => editor.chain().focus().toggleHeading({ level: 6 }).run()}
                            className={`${editor.isActive('heading', { level: 6 }) ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            H6
                        </button>
                        <button
                            title='reset font type'
                            onClick={() => editor.chain().focus().clearNodes().run()}
                            className='hover:bg-zinc-700 border border-zinc-700 rounded text-sm px-2 py-0.5'
                        >
                            reset
                        </button>
                    </div>
                </div>
                <div>
                    <p className='text-xs mb-1'>Inline Block :</p>
                    <div className='flex flex-wrap gap-1'>
                        <button
                            title='code'
                            onClick={() => editor.chain().focus().toggleCode().run()}
                            disabled={!editor.can().chain().focus().toggleCode().run()}
                            className={`${editor.isActive('code') ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            <CodeIcon className='inline w-4 h-4 mb-0.5 me-1' />Code
                        </button>
                        <button title='set link' onClick={setLink} className={`${editor.isActive('link') ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}>
                            <LinkIcon className='inline w-4 h-4 mb-0.5 me-1' />Link
                        </button>
                        <button
                            title='highlight'
                            onClick={() => editor.chain().focus().toggleHighlight().run()}
                            className={`${editor.isActive('highlight') ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm px-2 py-0.5`}
                        >
                            Highlight
                        </button>
                    </div>
                </div>
                <div>
                    <p className='text-xs mb-1'>Block :</p>
                    <div className='grid grid-cols-3 gap-2'>
                        <button
                            onClick={() => editor.chain().focus().toggleBulletList().run()}
                            className={`${editor.isActive('bulletList') ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm w-full h-20`}
                        >
                            Bullet list
                        </button>
                        <button
                            onClick={() => editor.chain().focus().toggleOrderedList().run()}
                            className={`${editor.isActive('orderedList') ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm w-full h-20`}
                        >
                            Ordered list
                        </button>
                        <button
                            onClick={() => editor.chain().focus().toggleCodeBlock().run()}
                            className={`${editor.isActive('codeBlock') ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm w-full h-20`}
                        >
                            Code block
                        </button>
                        <button
                            onClick={() => editor.chain().focus().toggleBlockquote().run()}
                            className={`${editor.isActive('blockquote') ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm w-full h-20`}
                        >
                            Blockquote
                        </button>
                        <button
                            onClick={() => editor.chain().focus().setColor('#958DF1').run()}
                            className={`${editor.isActive('textStyle', { color: '#958DF1' }) ? 'bg-zinc-700' : ''} border border-zinc-700 rounded text-sm w-full h-20`}
                        >
                            Purple
                        </button>
                    </div>
                </div>
            </div>
        </div>
    )
}

const ImageEditorComponent = ({ className, editor }: { className: string; editor: any }) => {
    const [url, setUrl] = useState<string | null>(null);
    const [width, setWidth] = useState<string>("200px");
    const [height, setHeight] = useState<string>("200px");

    if (!editor) {
        return null;
    }

    useEffect(() => {
        const { state } = editor;
        const node = state.selection.node;

        if (node && node.type.name === "image") {
            setUrl(node.attrs.src);
            setWidth(node.attrs.width || "200px");
            setHeight(node.attrs.height || "200px");
        }
    }, [editor, editor.state.selection]);

    const handleImageUrlChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        const imageUrl = event.target.value;
        setUrl(imageUrl);
        editor.chain().focus().setImage({ src: imageUrl, width, height }).run();
    };

    const handleWidthChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        const newWidth = event.target.value;
        setWidth(newWidth);
        if (url) {
            editor.chain().focus().setImage({ src: url, width: newWidth, height }).run();
        }
    };

    const handleHeightChange = (event: React.ChangeEvent<HTMLInputElement>) => {
        const newHeight = event.target.value;
        setHeight(newHeight);
        if (url) {
            editor.chain().focus().setImage({ src: url, width, height: newHeight }).run();
        }
    };

    return (
        <div className={className}>
            <input 
                type="text" 
                placeholder="Enter image URL" 
                value={url || ""} 
                onChange={handleImageUrlChange} 
                className="mb-2 bg-transparent border border-zinc-600 w-full" 
            />
            <div>
                <input 
                    className='bg-transparent border border-zinc-600 my-1 w-full' 
                    type="text" 
                    placeholder="Width (px or auto)" 
                    value={width || ""} 
                    onChange={handleWidthChange} 
                />
                <input 
                    className='bg-transparent border border-zinc-600 my-1 w-full' 
                    type="text" 
                    placeholder="Height (px or auto)" 
                    value={height || ""} 
                    onChange={handleHeightChange} 
                />
            </div>
        </div>
    );
};


export default TextEditorLite;
